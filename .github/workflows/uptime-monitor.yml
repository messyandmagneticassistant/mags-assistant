name: Uptime monitor

on:
  workflow_dispatch:
    inputs:
      endpoints_json:
        description: 'Override endpoints JSON (optional)'
        required: false
        default: ''
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes

jobs:
  ping:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
      # Optional, if present it should be a JSON array of URLs
      UPTIME_ENDPOINTS:   ${{ secrets.UPTIME_ENDPOINTS }}
    steps:
      - name: Resolve endpoint list
        id: endpoints
        shell: bash
        run: |
          # 1) from workflow input, else secret UPTIME_ENDPOINTS, else sensible defaults
          INPUT='${{ github.event.inputs.endpoints_json }}'
          SECRET="${UPTIME_ENDPOINTS}"
          if [ -n "$INPUT" ]; then
            LIST="$INPUT"
          elif [ -n "$SECRET" ]; then
            LIST="$SECRET"
          else
            LIST='["https://maggie.messyandmagnetic.com/health","https://assistant.messyandmagnetic.com/health"]'
          fi
          echo "list=$LIST" >> "$GITHUB_OUTPUT"

      - name: Ping endpoints
        id: ping
        shell: bash
        run: |
          set -e
          FAILS=0
          MSG="🛟 *Uptime check (${GITHUB_REPOSITORY})*\n"
          MSG="${MSG}Run: ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}\n\n"

          echo '${{ steps.endpoints.outputs.list }}' | jq -r '.[]' | while read -r URL; do
            echo "Checking $URL"
            CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 20 "$URL" || echo "000")
            if [ "$CODE" -ge 200 ] && [ "$CODE" -lt 400 ]; then
              echo "✅ $URL ($CODE)"
              MSG="${MSG}✅ ${URL} \`$CODE\`\n"
            else
              echo "❌ $URL ($CODE)"
              MSG="${MSG}❌ ${URL} \`$CODE\`\n"
              echo "FAIL" >> fails.tmp
            fi
          done

          if [ -f fails.tmp ]; then
            FAILS=$(wc -l < fails.tmp | tr -d ' ')
          fi

          echo "fails=$FAILS" >> "$GITHUB_OUTPUT"
          printf "%s" "$MSG" > message.txt

      - name: Send Telegram alert on failure
        if: steps.ping.outputs.fails != '0'
        shell: bash
        env:
          TG_TOKEN: ${{ env.TELEGRAM_BOT_TOKEN }}
          TG_CHAT:  ${{ env.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TG_TOKEN" ] || [ -z "$TG_CHAT" ]; then
            echo "Telegram not configured; skipping alert."
            exit 0
          fi
          # Telegram MarkdownV2 needs some escaping; keep it simple here
          TEXT=$(cat message.txt)
          curl -sS -X POST "https://api.telegram.org/bot${TG_TOKEN}/sendMessage" \
            -d chat_id="${TG_CHAT}" \
            -d parse_mode="Markdown" \
            --data-urlencode text="$TEXT" \
            >/dev/null