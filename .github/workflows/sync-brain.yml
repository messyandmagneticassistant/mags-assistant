permissions:
  contents: write
  actions: write

name: Sync Brain to Cloudflare KV

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Why are we running this?"
        required: false
        default: "manual"
  # schedule:
  #   - cron: '30 3 * * *'  # disabled to prevent automatic KV writes
  workflow_call:
    inputs:
      reason:
        required: false
        type: string
        default: "manual"

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      EFFECTIVE_GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      GH_PAT: ${{ secrets.GH_PAT }}
      GH_TOKEN: ${{ secrets.GH_PAT }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}

      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      CF_KV_POSTQ_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      CF_KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}

      SECRET_BLOB: thread-state
      BRAIN_DOC_KEY: PostQ:thread-state

    steps:
      - name: Diagnostics
        shell: bash
        env:
          GH_TOKEN: ${{ env.EFFECTIVE_GITHUB_TOKEN }}
        run: |
          echo "Actor: $GITHUB_ACTOR"
          echo "Repository: $GITHUB_REPOSITORY"
          gh auth status || true

      - name: Log dispatch reason
        env:
          DISPATCH_REASON: ${{ inputs.reason || github.event.inputs.reason || '' }}
          TRIGGER: ${{ github.event_name }}
        run: |
          if [ -n "$DISPATCH_REASON" ]; then
            echo "Dispatch reason: $DISPATCH_REASON"
          else
            echo "Dispatch reason: (none provided; trigger=$TRIGGER)"
          fi

      - name: Check Cloudflare secrets
        id: secrets
        shell: bash
        run: |
          set -euo pipefail
          missing=()
          for key in CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_API_TOKEN KV_NAMESPACE_ID; do
            if [ -z "${!key:-}" ]; then
              missing+=("$key")
            fi
          done

          if [ ${#missing[@]} -gt 0 ]; then
            printf 'missing=true\n' >> "$GITHUB_OUTPUT"
            printf 'missing_list=%s\n' "${missing[*]}" >> "$GITHUB_OUTPUT"
            echo "::warning::Brain sync skipped â€” missing secrets: ${missing[*]}"
          else
            printf 'missing=false\n' >> "$GITHUB_OUTPUT"
          fi

      - name: Abort (missing secrets)
        if: steps.secrets.outputs.missing == 'true'
        run: |
          echo "Skipping brain sync because required Cloudflare secrets are missing: ${{ steps.secrets.outputs.missing_list }}"

      - name: Checkout repository
        if: steps.secrets.outputs.missing == 'false'
        uses: actions/checkout@v4
        with:
          token: ${{ env.EFFECTIVE_GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Ensure default branch content
        if: steps.secrets.outputs.missing == 'false'
        shell: bash
        run: |
          set -euo pipefail
          default_branch=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
          if [ -z "$default_branch" ]; then
            echo '::warning::Unable to determine default branch from origin; assuming main.'
            default_branch=main
          fi
          echo "Using default branch: $default_branch"
          git fetch origin "$default_branch"
          git checkout --quiet "origin/$default_branch"
          echo "Checked out commit $(git rev-parse HEAD) from $default_branch"

      - name: Locate brain document
        if: steps.secrets.outputs.missing == 'false'
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f brain/brain.md ]; then
            echo 'brain/brain.md not found on the default branch; aborting.'
            exit 1
          fi
          echo "Found brain document with $(wc -c < brain/brain.md) bytes."

      - name: Setup Node.js
        if: steps.secrets.outputs.missing == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Wrangler CLI
        if: steps.secrets.outputs.missing == 'false'
        run: npm install -g wrangler@3

      - name: Upload brain to Cloudflare KV (disabled)
        if: steps.secrets.outputs.missing == 'false' && false
        run: echo 'KV writes disabled; skipping brain upload.'

      - name: Verify brain endpoint (diagnostic)
        if: steps.secrets.outputs.missing == 'false'
        continue-on-error: true
        env:
          VERIFY_PHRASE: "# Soul Blueprint Systems"
        shell: bash
        run: |
          set -euo pipefail
          echo 'Fetching remote brain endpoint for verification...'
          response=$(curl -fsS https://maggie.messyandmagnetic.com/brain || true)
          if [ -z "$response" ]; then
            echo '::warning::Unable to fetch remote brain endpoint.'
            exit 1
          fi
          if echo "$response" | grep -Fq "$VERIFY_PHRASE"; then
            echo 'Verified remote brain contains expected phrase.'
          else
            echo '::warning::Remote brain response does not contain the expected phrase.'
            exit 1
          fi
