name: Full Autonomy

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CF_KV_POSTQ_NAMESPACE_ID: ${{ secrets.CF_KV_POSTQ_NAMESPACE_ID }}
      WORKER_URL: ${{ secrets.WORKER_URL }}
      WORKER_BASE_URL: ${{ secrets.WORKER_URL }}
      WORKER_KEY: ${{ secrets.WORKER_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TALLY_API_KEY: ${{ secrets.TALLY_API_KEY }}
      NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_DONOR_PAGE_ID: ${{ secrets.NOTION_DONOR_PAGE_ID }}
      AUTONOMY_TASK: full-autonomy
      AUTONOMY_CHECKS: stripe=pending,tally=pending,social=pending,fileCleanup=pending,marketing=pending
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9.12.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Hydrate Maggie KV snapshot
        if: ${{ secrets.THREAD_STATE_JSON != '' && secrets.BRAIN_DOC_MD != '' }}
        env:
          THREAD_STATE_JSON: ${{ secrets.THREAD_STATE_JSON }}
          BRAIN_DOC_MD: ${{ secrets.BRAIN_DOC_MD }}
          CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CF_KV_POSTQ_NAMESPACE_ID: ${{ secrets.CF_KV_POSTQ_NAMESPACE_ID }}
        run: pnpm run seed:kv

      - name: Run Maggie orchestrator
        run: pnpm tsx scripts/fullAutonomy.ts

      - name: Evaluate run outcome
        if: always()
        id: runlog
        run: |
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const resolved = path.resolve(process.cwd(), 'run-output.json');
          const summary = {
            exists: false,
            summary: '',
            errors: 0,
            warnings: 0,
            critical: false,
            muted: false,
            quietStart: '',
            nextRun: '',
          };

          try {
            const raw = fs.readFileSync(resolved, 'utf8');
            const log = JSON.parse(raw);
            summary.exists = true;
            if (log?.summary?.text) {
              summary.summary = String(log.summary.text).replace(/\s+/g, ' ').slice(0, 400);
            }
            if (Array.isArray(log?.errors)) {
              summary.errors = log.errors.length;
            }
            if (Array.isArray(log?.warnings)) {
              summary.warnings = log.warnings.length;
            }
            summary.critical = !!log?.critical;
            summary.muted = !!(log?.quiet && log.quiet.muted);
            if (log?.quiet?.windowStart) {
              summary.quietStart = String(log.quiet.windowStart);
            }
            if (log?.nextRun) {
              summary.nextRun = String(log.nextRun);
            }
          } catch (err) {
            console.warn('[workflow] No run-output.json found:', err instanceof Error ? err.message : err);
          }

          const shouldNotify = summary.exists ? (!summary.muted || summary.critical) : true;
          const outputs = {
            should_notify: String(shouldNotify),
            critical: String(summary.critical),
            muted: String(summary.muted),
            summary: summary.summary.replace(/\r?\n/g, ' '),
            errors: String(summary.errors),
            quiet_start: summary.quietStart,
            next_run: summary.nextRun,
          };

          const outPath = process.env.GITHUB_OUTPUT;
          if (outPath) {
            const lines = Object.entries(outputs)
              .map(([key, value]) => `${key}=${value}`);
            fs.appendFileSync(outPath, `${lines.join('\n')}\n`);
          }

          const envPath = process.env.GITHUB_ENV;
          if (envPath) {
            if (summary.nextRun) {
              fs.appendFileSync(envPath, `RUNLOG_NEXT_RUN=${summary.nextRun}\n`);
            }
            if (summary.quietStart) {
              fs.appendFileSync(envPath, `LAST_QUIET_START=${summary.quietStart}\n`);
            }
          }

          console.log(
            '[workflow] shouldNotify=%s critical=%s muted=%s errors=%s',
            shouldNotify,
            summary.critical,
            summary.muted,
            summary.errors,
          );
          NODE

      - name: Notify Telegram completion
        if: always() && steps.runlog.outputs.should_notify == 'true'
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "${TELEGRAM_BOT_TOKEN}" ] && [ -n "${TELEGRAM_CHAT_ID}" ]; then
            DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            SUMMARY="${{ steps.runlog.outputs.summary }}"
            ERRORS="${{ steps.runlog.outputs.errors }}"
            CRITICAL="${{ steps.runlog.outputs.critical }}"
            MESSAGE="Maggie run complete at ${DATE}"
            if [ -n "$SUMMARY" ]; then
              MESSAGE="${MESSAGE}
Summary: ${SUMMARY}"
            fi
            if [ "$ERRORS" != "" ] && [ "$ERRORS" != "0" ]; then
              MESSAGE="${MESSAGE}
Errors logged: ${ERRORS}"
            fi
            if [ "$CRITICAL" = "true" ]; then
              MESSAGE="${MESSAGE}
Critical alerts present"
            fi
            curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
              --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
              --data-urlencode "text=${MESSAGE}" \
              > /dev/null
          else
            echo "Skipping Telegram notify â€“ credentials missing"
          fi

      - name: Stamp run metadata
        if: always()
        run: |
          python3 - <<'PY'
          from datetime import datetime, timedelta, timezone
          import os

          path = os.environ['GITHUB_ENV']
          now = datetime.now(timezone.utc)
          next_env = os.environ.get('RUNLOG_NEXT_RUN')
          try:
              next_target = datetime.fromisoformat(next_env.replace('Z', '+00:00')) if next_env else None
          except Exception:
              next_target = None
          next_iso = (next_target or (now + timedelta(minutes=5))).isoformat().replace('+00:00','Z')
          with open(path, 'a', encoding='utf-8') as fh:
              fh.write(f"AUTONOMY_TIMESTAMP={now.isoformat().replace('+00:00','Z')}\n")
              fh.write(f"AUTONOMY_NEXT_RUN={next_iso}\n")
          PY

      - name: Publish failure heartbeat
        if: failure()
        run: |
          {
            echo "AUTONOMY_CHECKS=stripe=fail:workflow-error,tally=fail:workflow-error,social=fail:workflow-error,fileCleanup=fail:workflow-error,marketing=fail:workflow-error"
          } >> "$GITHUB_ENV"
          pnpm tsx scripts/fullAutonomy.ts --from-env

