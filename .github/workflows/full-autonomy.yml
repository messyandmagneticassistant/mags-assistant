name: Full Autonomy

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CF_KV_POSTQ_NAMESPACE_ID: ${{ secrets.CF_KV_POSTQ_NAMESPACE_ID }}
      DISABLE_KV_WRITES: true
      WORKER_URL: ${{ secrets.WORKER_URL }}
      WORKER_BASE_URL: ${{ secrets.WORKER_URL }}
      WORKER_KEY: ${{ secrets.WORKER_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      TALLY_API_KEY: ${{ secrets.TALLY_API_KEY }}
      NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_DONOR_PAGE_ID: ${{ secrets.NOTION_DONOR_PAGE_ID }}
      AUTONOMY_TASK: full-autonomy
      AUTONOMY_CHECKS: website=pending,stripe=pending,tally=pending,social=pending,fileCleanup=pending,marketing=pending
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.0
          run_install: false

      - name: Enable Corepack
        run: |
          corepack enable
          corepack prepare pnpm@9.12.0 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Maggie orchestrator
        run: pnpm tsx scripts/fullAutonomy.ts

      - name: Evaluate run summary
        if: always()
        id: summary
        run: |
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const outputPath = path.resolve('run-output.json');
          let data = null;
          try {
            const raw = fs.readFileSync(outputPath, 'utf8');
            data = JSON.parse(raw);
          } catch (err) {
            console.warn('[autonomy] Unable to read run-output.json:', err?.message ?? err);
          }

          const lines = [];
          let critical = false;
          let inQuiet = false;
          if (data) {
            critical = data.critical === true || (Array.isArray(data.errors) && data.errors.length > 0);
            inQuiet = !!(data.quiet && data.quiet.inQuiet);
            const icon = critical ? 'üö®' : data.ok === false ? '‚ö†Ô∏è' : '‚úÖ';
            const summary = typeof data.summary === 'string' && data.summary.trim().length
              ? data.summary.trim()
              : 'Autonomy run complete.';
            lines.push(`${icon} <b>Maggie autonomy</b>`);
            lines.push(summary);
            if (Array.isArray(data.actions) && data.actions.length) {
              lines.push('‚öôÔ∏è Actions:');
              for (const action of data.actions) {
                lines.push(`‚Ä¢ ${action}`);
              }
            } else {
              lines.push('‚öôÔ∏è Actions: none');
            }
            if (Array.isArray(data.errors) && data.errors.length) {
              lines.push('‚ö†Ô∏è Alerts:');
              for (const issue of data.errors) {
                const label = issue?.label ?? issue?.key ?? 'alert';
                const detail = issue?.detail ?? 'Check failed.';
                lines.push(`‚Ä¢ ${label} ‚Äî ${detail}`);
              }
            } else {
              lines.push('‚ö†Ô∏è Alerts: none');
            }
            if (Array.isArray(data.warnings) && data.warnings.length) {
              lines.push('üü° Warnings:');
              for (const issue of data.warnings) {
                const label = issue?.label ?? issue?.key ?? 'warning';
                const detail = issue?.detail ?? 'Degraded check.';
                lines.push(`‚Ä¢ ${label} ‚Äî ${detail}`);
              }
            }
            if (typeof data.nextRun === 'string' && data.nextRun.trim().length) {
              const next = new Date(data.nextRun);
              if (!Number.isNaN(next.getTime())) {
                const nextLabel = new Intl.DateTimeFormat('en-US', {
                  timeZone: 'America/Denver',
                  dateStyle: 'medium',
                  timeStyle: 'short',
                  timeZoneName: 'short',
                }).format(next);
                lines.push(`‚û°Ô∏è Next: ${nextLabel}`);
              }
            }
          } else {
            critical = true;
            lines.push('‚ö†Ô∏è <b>Maggie autonomy</b>');
            lines.push('Run completed but run-output.json was not generated.');
          }

          const shouldNotify = critical || !inQuiet;
          console.log('shouldNotify:', shouldNotify);
          console.log('critical:', critical);
          console.log('inQuiet:', inQuiet);

          fs.appendFileSync(process.env.GITHUB_OUTPUT, `should_notify=${shouldNotify}\n`);
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `critical=${critical}\n`);
          fs.appendFileSync(process.env.GITHUB_OUTPUT, `in_quiet=${inQuiet}\n`);

          const message = lines.join('\n');
          fs.appendFileSync(process.env.GITHUB_ENV, `AUTONOMY_MESSAGE<<'EOF'\n${message}\nEOF\n`);
          NODE

      - name: Notify Telegram completion
        if: ${{ always() && steps.summary.outputs.should_notify == 'true' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          AUTONOMY_MESSAGE: ${{ env.AUTONOMY_MESSAGE }}
        run: |
          if [ -z "${TELEGRAM_BOT_TOKEN}" ] || [ -z "${TELEGRAM_CHAT_ID}" ]; then
            echo "Skipping Telegram notify ‚Äì credentials missing"
            exit 0
          fi
          curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            --data-urlencode "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text=${AUTONOMY_MESSAGE}" \
            > /dev/null

      - name: Stamp run metadata
        if: always()
        run: |
          python3 - <<'PY'
          from datetime import datetime, timedelta, timezone
          import os

          path = os.environ['GITHUB_ENV']
          now = datetime.now(timezone.utc)
          with open(path, 'a', encoding='utf-8') as fh:
              fh.write(f"AUTONOMY_TIMESTAMP={now.isoformat().replace('+00:00','Z')}\n")
              fh.write(f"AUTONOMY_NEXT_RUN={(now + timedelta(minutes=5)).isoformat().replace('+00:00','Z')}\n")
          PY

      - name: Publish failure heartbeat
        if: failure()
        run: |
          {
            echo "AUTONOMY_CHECKS=website=fail:workflow-error,stripe=fail:workflow-error,tally=fail:workflow-error,social=fail:workflow-error,fileCleanup=fail:workflow-error,marketing=fail:workflow-error"
          } >> "$GITHUB_ENV"
          pnpm tsx scripts/fullAutonomy.ts --from-env

