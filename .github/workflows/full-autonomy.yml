name: Full Autonomy

on:
  schedule:
    - cron: '*/30 * * * *'
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      GH_PAT: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
      GITHUB_PAT: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

      CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      CF_KV_POSTQ_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}
      CF_KV_NAMESPACE_ID: ${{ secrets.KV_NAMESPACE_ID }}

    steps:
      - name: Diagnostics
        run: |
          echo "Actor: $GITHUB_ACTOR"
          if [ -n "$GH_PAT" ]; then
            echo "Using personal access token for internal requests."
          else
            echo "Falling back to default GITHUB_TOKEN.";
          fi

      - name: Check Cloudflare secrets
        id: secrets
        run: |
          set -euo pipefail
          missing=()
          for key in CLOUDFLARE_ACCOUNT_ID CLOUDFLARE_API_TOKEN KV_NAMESPACE_ID; do
            if [ -z "${!key:-}" ]; then
              missing+=("$key")
            fi
          done

          if [ ${#missing[@]} -gt 0 ]; then
            printf 'missing=true\n' >>"$GITHUB_OUTPUT"
            printf 'missing_list=%s\n' "${missing[*]}" >>"$GITHUB_OUTPUT"
            echo "::warning::Missing Cloudflare secrets: ${missing[*]}"
          else
            printf 'missing=false\n' >>"$GITHUB_OUTPUT"
          fi

      - name: Abort (missing secrets)
        if: steps.secrets.outputs.missing == 'true'
        run: |
          echo "Skipping autonomy run because secrets are missing: ${{ steps.secrets.outputs.missing_list }}"

      - name: Check autonomy pause flag
        id: pause
        if: steps.secrets.outputs.missing != 'true'
        env:
          PAUSE_KEY: autonomy:paused
        run: |
          set -euo pipefail
          api="https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/storage/kv/namespaces/${KV_NAMESPACE_ID}/values/${PAUSE_KEY}"
          response=$(curl -s -w '\n%{http_code}' -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" "$api" || true)
          body="${response%$'\n'*}"
          status="${response##*$'\n'}"
          if [ "$status" = "200" ]; then
            normalized=$(echo "$body" | tr '[:upper:]' '[:lower:]' | tr -d ' \t\r\n')
            if [[ "$normalized" =~ ^(1|true|yes|on|paused)$ ]]; then
              echo "Autonomy is paused via KV flag."
              printf 'paused=true\n' >>"$GITHUB_OUTPUT"
            else
              printf 'paused=false\n' >>"$GITHUB_OUTPUT"
            fi
          else
            printf 'paused=false\n' >>"$GITHUB_OUTPUT"
          fi

      - name: Autonomy paused (skip run)
        if: steps.pause.outputs.paused == 'true'
        run: echo "Autonomy paused â€” skipping full autonomy cycle."

      - name: Checkout repository
        if: steps.pause.outputs.paused != 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ env.GH_PAT || github.token }}

      - name: Setup Node.js
        if: steps.pause.outputs.paused != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Enable pnpm via corepack
        if: steps.pause.outputs.paused != 'true'
        run: |
          set -euo pipefail
          corepack enable
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] || ''" 2>/dev/null || echo '')
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@$PNPM_VERSION" --activate
          else
            corepack prepare pnpm@latest --activate || true
          fi
          pnpm --version

      - name: Install dependencies
        if: steps.pause.outputs.paused != 'true'
        run: pnpm install --frozen-lockfile

      - name: Hydrate thread-state snapshot
        if: steps.pause.outputs.paused != 'true'
        run: |
          set -euo pipefail
          mkdir -p config
          api="https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/storage/kv/namespaces/${KV_NAMESPACE_ID}/values/PostQ:thread-state"
          response=$(curl -s -w '\n%{http_code}' -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" "$api" || true)
          body="${response%$'\n'*}"
          status="${response##*$'\n'}"
          if [ "$status" = "200" ]; then
            printf '%s' "$body" > config/thread-state.remote.json
          else
            echo '{}' > config/thread-state.remote.json
            echo "::warning::Unable to hydrate thread-state (status $status)."
          fi
          chmod 600 config/thread-state.remote.json || true

      - name: Run full autonomy
        if: steps.pause.outputs.paused != 'true'
        run: pnpm exec tsx scripts/fullAutonomy.ts
