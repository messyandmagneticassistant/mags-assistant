name: Hydrate Secret Blob

on:
  workflow_dispatch:

jobs:
  hydrate-secret-blob:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Parse secret blob and write config
        env:
          SECRET_BLOB: ${{ secrets.SECRET_BLOB }}
        run: |
          mkdir -p config
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const raw = process.env.SECRET_BLOB;
          if (!raw) {
            console.error('SECRET_BLOB secret is not defined.');
            process.exit(1);
          }

          let parsed;
          try {
            parsed = JSON.parse(raw);
          } catch (error) {
            console.error('Failed to parse SECRET_BLOB as JSON:', error.message);
            process.exit(1);
          }

          if (typeof parsed !== 'object' || parsed === null || Array.isArray(parsed)) {
            console.error('SECRET_BLOB must be a JSON object with key/value pairs.');
            process.exit(1);
          }

          const outputPath = path.join('config', 'thread-state.json');
          fs.writeFileSync(outputPath, JSON.stringify(parsed, null, 2));

          const keys = Object.keys(parsed);
          const preview = keys.slice(0, 5);
          console.log(`Parsed keys (${preview.length} shown):`, preview.join(', '));
          NODE

      - name: Upload thread state to Cloudflare KV
        run: |
          npx wrangler kv:put \
            --binding=POSTQ \
            PostQ:thread-state \
            --path ./config/thread-state.json \
            --env production

      - name: Show parsed key preview
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const outputPath = path.join('config', 'thread-state.json');
          const contents = fs.readFileSync(outputPath, 'utf8');
          const parsed = JSON.parse(contents);
          const keys = Object.keys(parsed);
          const preview = keys.slice(0, 5);
          console.log(`Parsed keys (${preview.length} shown):`, preview.join(', '));
          NODE
