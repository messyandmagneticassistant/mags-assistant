name: Deploy Cloudflare Worker

on:
  push:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '45 3 * * *'

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      EFFECTIVE_CF_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID || secrets.CF_ACCOUNT_ID }}
      EFFECTIVE_CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN || secrets.CF_API_TOKEN }}
    steps:
      - name: Diagnostics
        run: |
          echo "Actor: $GITHUB_ACTOR"
          echo "Repository: $GITHUB_REPOSITORY"

      - name: Check Cloudflare configuration
        id: cloudflare
        shell: bash
        run: |
          set -euo pipefail
          missing=()

          if [ -z "${EFFECTIVE_CF_ACCOUNT_ID:-}" ]; then
            missing+=("CLOUDFLARE_ACCOUNT_ID or CF_ACCOUNT_ID")
          fi

          if [ -z "${EFFECTIVE_CF_API_TOKEN:-}" ]; then
            missing+=("CLOUDFLARE_API_TOKEN or CF_API_TOKEN")
          fi

          if [ ${#missing[@]} -gt 0 ]; then
            printf 'missing=true\n' >> "$GITHUB_OUTPUT"
            printf 'missing_list=%s\n' "${missing[*]}" >> "$GITHUB_OUTPUT"
            echo "::warning::Deployment skipped â€” missing Cloudflare configuration: ${missing[*]}"
          else
            printf 'missing=false\n' >> "$GITHUB_OUTPUT"
          fi

      - name: Abort (missing Cloudflare configuration)
        if: steps.cloudflare.outputs.missing == 'true'
        run: |
          echo "Skipping deployment because required Cloudflare configuration was not provided: ${{ steps.cloudflare.outputs.missing_list }}"

      - name: Checkout repository
        if: steps.cloudflare.outputs.missing == 'false'
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: steps.cloudflare.outputs.missing == 'false'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: pnpm

      - name: Enable Corepack and install pnpm
        if: steps.cloudflare.outputs.missing == 'false'
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        if: steps.cloudflare.outputs.missing == 'false'
        run: pnpm install --frozen-lockfile

      - name: Deploy Cloudflare Worker
        if: steps.cloudflare.outputs.missing == 'false'
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ env.EFFECTIVE_CF_ACCOUNT_ID }}
          CF_ACCOUNT_ID: ${{ env.EFFECTIVE_CF_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ env.EFFECTIVE_CF_API_TOKEN }}
          CF_API_TOKEN: ${{ env.EFFECTIVE_CF_API_TOKEN }}
        run: pnpm exec wrangler deploy worker/worker.ts
