name: Deploy Maggie Worker

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Hydrate secrets from blob
        env:
          SECRET_BLOB_PAYLOAD: ${{ secrets.SECRET_BLOB }}
        run: |
          node <<'EOF'
          const fs = require('fs');
          const core = require('@actions/core');

          const payload = process.env.SECRET_BLOB_PAYLOAD;
          if (!payload || !payload.trim()) {
            console.warn('[secret-blob] No SECRET_BLOB payload provided; skipping hydration.');
            process.exit(0);
          }

          const envFile = process.env.GITHUB_ENV;
          if (!envFile) {
            console.error('[secret-blob] GITHUB_ENV is not defined.');
            process.exit(1);
          }

          let decoded;
          try {
            decoded = Buffer.from(payload.trim(), 'base64').toString('utf8');
          } catch (err) {
            console.error('[secret-blob] Failed to decode SECRET_BLOB payload:', err?.message || err);
            process.exit(1);
          }

          let parsed;
          try {
            parsed = JSON.parse(decoded);
          } catch (err) {
            console.error('[secret-blob] SECRET_BLOB payload was not valid JSON:', err?.message || err);
            process.exit(1);
          }

          const exported = [];
          for (const [key, rawValue] of Object.entries(parsed)) {
            if (rawValue === undefined || rawValue === null) {
              continue;
            }

            if (typeof rawValue === 'object') {
              console.warn(`[secret-blob] Skipping nested value for ${key}; expected a primitive.`);
              continue;
            }

            if (process.env[key] && String(process.env[key]).trim().length > 0) {
              continue;
            }

            const value = String(rawValue);
            core.setSecret(value.replace(/\r?\n/g, '%0D%0A'));
            fs.appendFileSync(envFile, `${key}<<__MAGGIE__\n${value}\n__MAGGIE__\n`);
            exported.push(key);
          }

          if (exported.length === 0) {
            console.warn('[secret-blob] No secrets were exported from the blob payload.');
          } else {
            console.log(`[secret-blob] Exported ${exported.length} secrets: ${exported.join(', ')}`);
          }
          EOF

      - name: Validate configuration
        run: node scripts/ci/validate-config.mjs
        env:
          MAGGIE_CONFIG_JSON: ${{ secrets.MAGGIE_CONFIG_JSON }}

      - name: Deploy to Cloudflare Workers
        id: publish
        run: node scripts/ci/run-wrangler-deploy.mjs --config wrangler.toml

      - name: Notify Telegram
        if: always()
        env:
          DEPLOY_STATUS: ${{ job.status }}
          DEPLOY_STEP_STATUS: ${{ steps.publish.outcome }}
        run: node scripts/ci/notify-telegram.mjs
