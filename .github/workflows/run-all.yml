name: Run All (PAT Debug + Sync Brain + Report)

on:
  workflow_dispatch:

permissions:
  contents: read
  actions: write
  issues: write
  pull-requests: write

jobs:
  gh_pat_debug:
    uses: ./.github/workflows/debug-gh-pat.yml
    secrets: inherit

  sync_brain:
    needs: gh_pat_debug
    uses: ./.github/workflows/sync-brain.yml
    secrets: inherit

  report:
    needs: [gh_pat_debug, sync_brain]
    runs-on: ubuntu-latest
    steps:
      - name: Fetch diag config
        env:
          POST_THREAD_SECRET: ${{ secrets.POST_THREAD_SECRET }}
        run: |
          set -euo pipefail
          curl --fail -sS \
            -H "Authorization: Bearer ${POST_THREAD_SECRET}" \
            https://maggie.messyandmagnetic.com/diag/config \
            -o diag-config.json

      - name: Build summary
        id: summary
        env:
          GH_PAT_RESULT: ${{ needs.gh_pat_debug.result }}
          SYNC_RESULT: ${{ needs.sync_brain.result }}
        run: |
          set -euo pipefail
          python <<'PY'
import json
import os
from pathlib import Path

keys = []
try:
    data = json.loads(Path("diag-config.json").read_text())
    def collect(prefix, value):
        if isinstance(value, dict):
            for k, v in value.items():
                collect(prefix + [str(k)], v)
        elif isinstance(value, list):
            for idx, v in enumerate(value[:10]):
                collect(prefix + [str(idx)], v)
        else:
            keys.append(".".join(prefix))
    if isinstance(data, (dict, list)):
        collect([], data)
except Exception:
    pass

lines = [
    "### Run All Summary",
    f"- GH token debug: {os.environ.get('GH_PAT_RESULT', 'unknown')}",
    f"- Sync brain: {os.environ.get('SYNC_RESULT', 'unknown')}",
]

if keys:
    lines.append(f"- diag/config sample keys: {', '.join(keys[:10])}")
else:
    lines.append("- diag/config retrieved (no JSON keys detected)")

summary = "\n".join(lines)
Path("summary.md").write_text(summary)
print(summary)
PY
          SUMMARY=$(cat summary.md)
          echo "$SUMMARY" >> "$GITHUB_STEP_SUMMARY"
          {
            echo 'body<<EOF'
            cat summary.md
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Detect PR for this commit
        id: pr
        env:
          GH_TOKEN: ${{ github.token }}
          SHA: ${{ github.sha }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          PR_NUMBER=$(gh api repos/${REPO}/commits/${SHA}/pulls --jq '.[0].number // empty')
          if [ -n "$PR_NUMBER" ]; then
            echo "Found PR #$PR_NUMBER for $SHA"
            echo "number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
          else
            echo "No PR found for $SHA"
          fi

      - name: Comment on PR
        if: ${{ steps.pr.outputs.number && steps.summary.outputs.body != '' }}
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          python <<'PY'
import json
import os
from pathlib import Path

body = Path('summary.md').read_text()
req_body = json.dumps({'body': body}).encode()
from urllib import request
req = request.Request(
    f"https://api.github.com/repos/{os.environ['REPO']}/issues/{os.environ['PR_NUMBER']}/comments",
    data=req_body,
    headers={
        'Authorization': f"Bearer {os.environ['TOKEN']}",
        'Accept': 'application/vnd.github+json',
        'Content-Type': 'application/json',
    },
    method='POST',
)
with request.urlopen(req) as resp:
    print(f"Comment posted to PR #{os.environ['PR_NUMBER']} (status {resp.status})")
PY
